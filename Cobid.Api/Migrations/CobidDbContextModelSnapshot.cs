// <auto-generated />
using System;
using Cobid.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cobid.Api.Migrations
{
    [DbContext(typeof(CobidDbContext))]
    partial class CobidDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Cobid.Api.Entities.Auction.AuctionEvent", b =>
                {
                    b.Property<long>("AuctionEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AuctionEventId"), 1L, 1);

                    b.Property<DateTime>("AuctionEventDateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AuctionEventDateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("AuctionEventDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("AuctionEventStartingBid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AuctionEventTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("HasEnded")
                        .HasColumnType("bit");

                    b.Property<bool>("HasStarted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ProductConditionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AuctionEventId");

                    b.ToTable("AuctionEvents");

                    b.HasData(
                        new
                        {
                            AuctionEventId = 1L,
                            AuctionEventDateEnd = new DateTime(2022, 12, 6, 8, 26, 15, 514, DateTimeKind.Local).AddTicks(1185),
                            AuctionEventDateStart = new DateTime(2022, 12, 6, 8, 26, 15, 514, DateTimeKind.Local).AddTicks(1184),
                            AuctionEventDescription = "Maxsun B660M iCraft Wifi Motherboard - New",
                            AuctionEventStartingBid = 8000.99m,
                            AuctionEventTitle = "Maxsun B660M iCraft Wifi",
                            Deleted = false,
                            HasEnded = false,
                            HasStarted = false,
                            IsActive = true,
                            ProductConditionId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Cobid.Api.Entities.Auction.AuctionEventParticipant", b =>
                {
                    b.Property<long>("AuctionEventParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AuctionEventParticipantId"), 1L, 1);

                    b.Property<long>("AuctionEventId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AuctionEventParticipantId");

                    b.HasIndex("AuctionEventId");

                    b.ToTable("AuctionEventParticipants");

                    b.HasData(
                        new
                        {
                            AuctionEventParticipantId = 1L,
                            AuctionEventId = 1L,
                            IsActive = true,
                            IsBanned = false,
                            UserId = 1
                        },
                        new
                        {
                            AuctionEventParticipantId = 2L,
                            AuctionEventId = 1L,
                            IsActive = true,
                            IsBanned = false,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Cobid.Api.Entities.Auction.AuctionProductImage", b =>
                {
                    b.Property<long>("AuctionProductImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AuctionProductImageId"), 1L, 1);

                    b.Property<long>("AuctionEventId")
                        .HasColumnType("bigint");

                    b.Property<string>("AuctionProductImageData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuctionProductImageTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuctionProductImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("AuctionProductImageId");

                    b.HasIndex("AuctionEventId");

                    b.ToTable("AuctionProductImages");

                    b.HasData(
                        new
                        {
                            AuctionProductImageId = 1L,
                            AuctionEventId = 1L,
                            AuctionProductImageData = "",
                            AuctionProductImageTitle = "Maxsun B660M iCraft Wifi",
                            AuctionProductImageUrl = "https://x0.ifengimg.com/res/2022/16FC76B2979CE52987FBC116504BC8B551B84A6A_size79_w640_h480.jpeg",
                            IsActive = true
                        },
                        new
                        {
                            AuctionProductImageId = 2L,
                            AuctionEventId = 1L,
                            AuctionProductImageData = "",
                            AuctionProductImageTitle = "Maxsun B660M iCraft Wifi",
                            AuctionProductImageUrl = "https://www.alitrade.com.my/image/alitrade/image/data/all_product_images/product-311/eCvSpxzh1661177257.jpg",
                            IsActive = true
                        },
                        new
                        {
                            AuctionProductImageId = 3L,
                            AuctionEventId = 1L,
                            AuctionProductImageData = "",
                            AuctionProductImageTitle = "Maxsun B660M iCraft Wifi",
                            AuctionProductImageUrl = "https://media.karousell.com/media/photos/products/2022/9/18/maxsun_ms_b660m_icraft_wifi_mo_1663474563_96b660d4.jpg",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Cobid.Api.Entities.Community.CommunityFileAttachment", b =>
                {
                    b.Property<long>("CommunityFileAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CommunityFileAttachmentId"), 1L, 1);

                    b.Property<string>("CommunityFileAttachmentData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommunityFileAttachmentDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommunityFileAttachmentTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CommunityMessageId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("CommunityFileAttachmentId");

                    b.HasIndex("CommunityMessageId");

                    b.ToTable("CommunityFileAttachments");
                });

            modelBuilder.Entity("Cobid.Api.Entities.Community.CommunityImage", b =>
                {
                    b.Property<long>("CommunityImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CommunityImageId"), 1L, 1);

                    b.Property<string>("CommunityDataImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommunityImageDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommunityImageLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommunityImageTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CommunityMessageId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("CommunityImageId");

                    b.HasIndex("CommunityMessageId");

                    b.ToTable("CommunityImages");
                });

            modelBuilder.Entity("Cobid.Api.Entities.Community.CommunityMessage", b =>
                {
                    b.Property<long>("CommunityMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CommunityMessageId"), 1L, 1);

                    b.Property<long>("CommunityPostId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.HasKey("CommunityMessageId");

                    b.HasIndex("CommunityPostId");

                    b.ToTable("CommunityMessages");

                    b.HasData(
                        new
                        {
                            CommunityMessageId = 1L,
                            CommunityPostId = 1L,
                            DateSent = new DateTime(2022, 12, 6, 8, 56, 15, 514, DateTimeKind.Local).AddTicks(1395),
                            IsActive = true,
                            IsRead = false,
                            MessageContent = "Found this really cool Jansport bag on the website and its cheap and still in really good shape link: www.Link.Jansport.com\r\n\r\n",
                            SenderId = 1
                        },
                        new
                        {
                            CommunityMessageId = 2L,
                            CommunityPostId = 2L,
                            DateSent = new DateTime(2022, 12, 6, 9, 1, 15, 514, DateTimeKind.Local).AddTicks(1413),
                            IsActive = true,
                            IsRead = false,
                            MessageContent = "Good day everyone. I was just browsing on this lovely website until I saw This Item that really caught my attention. When I tried to add it to card it Wouldnt come through. Any help would be appreciated thanks!",
                            SenderId = 1
                        });
                });

            modelBuilder.Entity("Cobid.Api.Entities.Community.CommunityPost", b =>
                {
                    b.Property<long>("CommunityPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CommunityPostId"), 1L, 1);

                    b.Property<string>("CommunityPostTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CommunityPostType")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("ThreadStaterUserId")
                        .HasColumnType("int");

                    b.HasKey("CommunityPostId");

                    b.ToTable("CommunityPosts");

                    b.HasData(
                        new
                        {
                            CommunityPostId = 1L,
                            CommunityPostTitle = "Cheapest Bags I could find (Steal)",
                            CommunityPostType = 7L,
                            DateCreated = new DateTime(2022, 12, 6, 8, 56, 15, 514, DateTimeKind.Local).AddTicks(1347),
                            IsActive = true,
                            IsRead = false,
                            ThreadStaterUserId = 1
                        },
                        new
                        {
                            CommunityPostId = 2L,
                            CommunityPostTitle = "My Items refuse to go into cart help!",
                            CommunityPostType = 9L,
                            DateCreated = new DateTime(2022, 12, 6, 9, 1, 15, 514, DateTimeKind.Local).AddTicks(1370),
                            IsActive = true,
                            IsRead = false,
                            ThreadStaterUserId = 2
                        });
                });

            modelBuilder.Entity("Cobid.Api.Entities.Community.CommunityPostRating", b =>
                {
                    b.Property<long>("CommunityPostRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CommunityPostRatingId"), 1L, 1);

                    b.Property<long>("CommunityPostId")
                        .HasColumnType("bigint");

                    b.Property<long>("CommunityPostRatingDislike")
                        .HasColumnType("bigint");

                    b.Property<int>("CommunityPostRatingGrade")
                        .HasColumnType("int");

                    b.Property<long>("CommunityPostRatingLike")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommunityPostRatingId");

                    b.HasIndex("CommunityPostId");

                    b.ToTable("CommunityPostsRatings");
                });

            modelBuilder.Entity("Cobid.Api.Entities.Enums.CommunityPostType", b =>
                {
                    b.Property<long>("CommunityPostTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CommunityPostTypeId"), 1L, 1);

                    b.Property<string>("CommunityPostTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("CommunityPostTypeId");

                    b.ToTable("CommunityPostTypes");

                    b.HasData(
                        new
                        {
                            CommunityPostTypeId = 1L,
                            CommunityPostTypeName = "Books",
                            IsActive = true
                        },
                        new
                        {
                            CommunityPostTypeId = 2L,
                            CommunityPostTypeName = "Clothings",
                            IsActive = true
                        },
                        new
                        {
                            CommunityPostTypeId = 3L,
                            CommunityPostTypeName = "Electronics",
                            IsActive = true
                        },
                        new
                        {
                            CommunityPostTypeId = 4L,
                            CommunityPostTypeName = "Jewelries",
                            IsActive = true
                        },
                        new
                        {
                            CommunityPostTypeId = 5L,
                            CommunityPostTypeName = "Paintings",
                            IsActive = true
                        },
                        new
                        {
                            CommunityPostTypeId = 6L,
                            CommunityPostTypeName = "Tools",
                            IsActive = true
                        },
                        new
                        {
                            CommunityPostTypeId = 7L,
                            CommunityPostTypeName = "Bags",
                            IsActive = true
                        },
                        new
                        {
                            CommunityPostTypeId = 8L,
                            CommunityPostTypeName = "Others",
                            IsActive = true
                        },
                        new
                        {
                            CommunityPostTypeId = 9L,
                            CommunityPostTypeName = "Help",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Cobid.Api.Entities.Enums.GovernmentIdentification", b =>
                {
                    b.Property<int>("GovernmentIdentificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GovernmentIdentificationId"), 1L, 1);

                    b.Property<string>("GovIdName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GovIdShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("GovernmentIdentificationId");

                    b.ToTable("GovernmentTypeIds");

                    b.HasData(
                        new
                        {
                            GovernmentIdentificationId = 1,
                            GovIdName = "Philippine Passport",
                            GovIdShortName = "DFA",
                            isActive = true
                        },
                        new
                        {
                            GovernmentIdentificationId = 2,
                            GovIdName = "Social Security System",
                            GovIdShortName = "SSS",
                            isActive = true
                        },
                        new
                        {
                            GovernmentIdentificationId = 3,
                            GovIdName = "Government Service Insurance System",
                            GovIdShortName = "GSIS",
                            isActive = true
                        },
                        new
                        {
                            GovernmentIdentificationId = 4,
                            GovIdName = "Unified Multi-Purpose Identification",
                            GovIdShortName = "UMID",
                            isActive = true
                        },
                        new
                        {
                            GovernmentIdentificationId = 5,
                            GovIdName = "Driver’s License",
                            GovIdShortName = "LTO",
                            isActive = true
                        },
                        new
                        {
                            GovernmentIdentificationId = 6,
                            GovIdName = "Professional Regulatory Commission",
                            GovIdShortName = "PRC",
                            isActive = true
                        },
                        new
                        {
                            GovernmentIdentificationId = 7,
                            GovIdName = "Professional Regulatory Commission",
                            GovIdShortName = "Voter’s ID",
                            isActive = true
                        },
                        new
                        {
                            GovernmentIdentificationId = 8,
                            GovIdName = "School ID",
                            GovIdShortName = "",
                            isActive = true
                        });
                });

            modelBuilder.Entity("Cobid.Api.Entities.Enums.ProductListedAs", b =>
                {
                    b.Property<int>("ProductListedAsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductListedAsId"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ProductListedAsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductListedAsId");

                    b.ToTable("ProductsListedAs");

                    b.HasData(
                        new
                        {
                            ProductListedAsId = 1,
                            IsActive = true,
                            ProductListedAsName = "Single Item"
                        },
                        new
                        {
                            ProductListedAsId = 2,
                            IsActive = true,
                            ProductListedAsName = "In Stock"
                        });
                });

            modelBuilder.Entity("Cobid.Api.Entities.Images.UserValidationImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DataImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GovernmentIdentificationId")
                        .HasColumnType("int");

                    b.Property<string>("IdTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageHttpLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNew")
                        .HasColumnType("bit");

                    b.Property<bool>("IsValidated")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserValidationImages");
                });

            modelBuilder.Entity("Cobid.Api.Entities.LiveSellingModels.LiveSelling", b =>
                {
                    b.Property<long>("LiveSellingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LiveSellingId"), 1L, 1);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("HasEnded")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LiveSellingDateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LiveSellingDateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("LiveSellingDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LiveSellingLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LiveSellingPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LiveSellingTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LiveSellingId");

                    b.ToTable("LiveSellings");
                });

            modelBuilder.Entity("Cobid.Api.Entities.LiveSellingModels.LiveSellingImage", b =>
                {
                    b.Property<long>("LiveSellingImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LiveSellingImageId"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LiveSellingDataImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LiveSellingId")
                        .HasColumnType("bigint");

                    b.Property<string>("LiveSellingImageTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LiveSellingImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LiveSellingImageId");

                    b.HasIndex("LiveSellingId");

                    b.ToTable("LiveSellingImages");
                });

            modelBuilder.Entity("Cobid.Api.Entities.Measurement.DimensionsModel", b =>
                {
                    b.Property<int>("DimensionsModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DimensionsModelId"), 1L, 1);

                    b.Property<string>("DimensionsModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DimensionsModelShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DimensionsModelId");

                    b.ToTable("Dimensions");

                    b.HasData(
                        new
                        {
                            DimensionsModelId = 1,
                            DimensionsModelName = "inches",
                            DimensionsModelShortName = "in"
                        },
                        new
                        {
                            DimensionsModelId = 2,
                            DimensionsModelName = "feet",
                            DimensionsModelShortName = "ft"
                        },
                        new
                        {
                            DimensionsModelId = 3,
                            DimensionsModelName = "centimeters",
                            DimensionsModelShortName = "cm"
                        },
                        new
                        {
                            DimensionsModelId = 4,
                            DimensionsModelName = "millimeters",
                            DimensionsModelShortName = "mm"
                        });
                });

            modelBuilder.Entity("Cobid.Api.Entities.Measurement.WeightModel", b =>
                {
                    b.Property<int>("WeightModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WeightModelId"), 1L, 1);

                    b.Property<string>("WeightModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeightModelShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WeightModelId");

                    b.ToTable("Weights");

                    b.HasData(
                        new
                        {
                            WeightModelId = 1,
                            WeightModelName = "kilogram",
                            WeightModelShortName = "kg"
                        },
                        new
                        {
                            WeightModelId = 2,
                            WeightModelName = "milligram",
                            WeightModelShortName = "mg"
                        },
                        new
                        {
                            WeightModelId = 3,
                            WeightModelName = "pounds",
                            WeightModelShortName = "lbs"
                        });
                });

            modelBuilder.Entity("Cobid.Api.Entities.Messaging.AuctionMessage", b =>
                {
                    b.Property<long>("AuctionMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AuctionMessageId"), 1L, 1);

                    b.Property<decimal>("AuctionBidAmt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("AuctionEventId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBidWinner")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.HasKey("AuctionMessageId");

                    b.HasIndex("AuctionEventId");

                    b.ToTable("AuctionMessages");

                    b.HasData(
                        new
                        {
                            AuctionMessageId = 1L,
                            AuctionBidAmt = 1000.99m,
                            AuctionEventId = 1L,
                            DateSent = new DateTime(2022, 12, 6, 8, 27, 15, 514, DateTimeKind.Local).AddTicks(1283),
                            IsActive = true,
                            IsBanned = false,
                            IsBidWinner = false,
                            IsRead = false,
                            MessageContent = "I bid for",
                            SenderId = 1
                        },
                        new
                        {
                            AuctionMessageId = 2L,
                            AuctionBidAmt = 1100.99m,
                            AuctionEventId = 1L,
                            DateSent = new DateTime(2022, 12, 6, 8, 28, 15, 514, DateTimeKind.Local).AddTicks(1305),
                            IsActive = true,
                            IsBanned = false,
                            IsBidWinner = false,
                            IsRead = false,
                            MessageContent = "This is my bid",
                            SenderId = 2
                        },
                        new
                        {
                            AuctionMessageId = 3L,
                            AuctionBidAmt = 1500.99m,
                            AuctionEventId = 1L,
                            DateSent = new DateTime(2022, 12, 6, 8, 29, 15, 514, DateTimeKind.Local).AddTicks(1318),
                            IsActive = true,
                            IsBanned = false,
                            IsBidWinner = false,
                            IsRead = false,
                            MessageContent = "Upping it to",
                            SenderId = 1
                        });
                });

            modelBuilder.Entity("Cobid.Api.Entities.Messaging.Conversation", b =>
                {
                    b.Property<long>("ConversationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ConversationId"), 1L, 1);

                    b.Property<string>("ConversationTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.HasKey("ConversationId");

                    b.ToTable("Conversations");

                    b.HasData(
                        new
                        {
                            ConversationId = 1L,
                            ConversationTitle = "Intel ARC a380",
                            CreatedById = 2,
                            DateCreated = new DateTime(2022, 12, 6, 8, 26, 15, 514, DateTimeKind.Local).AddTicks(1042),
                            IsActive = true,
                            IsRead = false,
                            ProductId = 1L,
                            ReceiverId = 1
                        });
                });

            modelBuilder.Entity("Cobid.Api.Entities.Messaging.Message", b =>
                {
                    b.Property<long>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MessageId"), 1L, 1);

                    b.Property<long>("ConversationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.HasKey("MessageId");

                    b.HasIndex("ConversationId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            MessageId = 1L,
                            ConversationId = 1L,
                            DateSent = new DateTime(2022, 12, 6, 8, 26, 15, 514, DateTimeKind.Local).AddTicks(1065),
                            ImageData = "",
                            IsActive = true,
                            IsRead = false,
                            MessageContent = "Hello",
                            SenderId = 2
                        },
                        new
                        {
                            MessageId = 2L,
                            ConversationId = 1L,
                            DateSent = new DateTime(2022, 12, 6, 8, 26, 15, 514, DateTimeKind.Local).AddTicks(1083),
                            ImageData = "",
                            IsActive = true,
                            IsRead = false,
                            MessageContent = "Yes?",
                            SenderId = 1
                        },
                        new
                        {
                            MessageId = 3L,
                            ConversationId = 1L,
                            DateSent = new DateTime(2022, 12, 6, 8, 26, 15, 514, DateTimeKind.Local).AddTicks(1137),
                            ImageData = "",
                            IsActive = true,
                            IsRead = false,
                            MessageContent = "Still available?",
                            SenderId = 2
                        },
                        new
                        {
                            MessageId = 4L,
                            ConversationId = 1L,
                            DateSent = new DateTime(2022, 12, 6, 8, 26, 15, 514, DateTimeKind.Local).AddTicks(1150),
                            ImageData = "",
                            IsActive = true,
                            IsRead = false,
                            MessageContent = "Yes, it is available",
                            SenderId = 1
                        });
                });

            modelBuilder.Entity("Cobid.Api.Entities.Product.Product", b =>
                {
                    b.Property<long>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProductId"), 1L, 1);

                    b.Property<string>("AdminRemarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("DimensionModelId")
                        .HasColumnType("int");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSale")
                        .HasColumnType("bit");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductConditionId")
                        .HasColumnType("int");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductListedAs")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductRanking")
                        .HasColumnType("int");

                    b.Property<int>("ProductRating")
                        .HasColumnType("int");

                    b.Property<int>("ProductStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ProductStockCount")
                        .HasColumnType("int");

                    b.Property<decimal>("SaleAmt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("WeightModelId")
                        .HasColumnType("int");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1L,
                            AdminRemarks = "",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DimensionModelId = 4,
                            Height = 51m,
                            IsActive = true,
                            IsSale = false,
                            Length = 276m,
                            ProductCategoryId = 3,
                            ProductConditionId = 1,
                            ProductDescription = "Intel Arc Alchemist A380 is Intel’s first desktop graphics card in the lineup",
                            ProductListedAs = 0,
                            ProductName = "Intel ARC a380",
                            ProductPrice = 20000.99m,
                            ProductRanking = 1,
                            ProductRating = 5,
                            ProductStatusId = 1,
                            ProductStockCount = 50,
                            SaleAmt = 0.0m,
                            UserId = 1,
                            Weight = 5.09m,
                            WeightModelId = 3,
                            Width = 131m
                        },
                        new
                        {
                            ProductId = 2L,
                            AdminRemarks = "",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DimensionModelId = 4,
                            Height = 51m,
                            IsActive = true,
                            IsSale = false,
                            Length = 276m,
                            ProductCategoryId = 2,
                            ProductConditionId = 1,
                            ProductDescription = "Assorted Clothes",
                            ProductListedAs = 0,
                            ProductName = "Assorted Clothing",
                            ProductPrice = 500.99m,
                            ProductRanking = 1,
                            ProductRating = 5,
                            ProductStatusId = 1,
                            ProductStockCount = 10,
                            SaleAmt = 0.0m,
                            UserId = 1,
                            Weight = 5.09m,
                            WeightModelId = 3,
                            Width = 131m
                        });
                });

            modelBuilder.Entity("Cobid.Api.Entities.Product.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductCategoryId"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ProductCategoryDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductCategoryId");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            ProductCategoryId = 1,
                            IsActive = true,
                            ProductCategoryDescription = "Books",
                            ProductCategoryName = "Books"
                        },
                        new
                        {
                            ProductCategoryId = 2,
                            IsActive = true,
                            ProductCategoryDescription = "Clothings",
                            ProductCategoryName = "Clothings"
                        },
                        new
                        {
                            ProductCategoryId = 3,
                            IsActive = true,
                            ProductCategoryDescription = "Electronics",
                            ProductCategoryName = "Electronics"
                        },
                        new
                        {
                            ProductCategoryId = 4,
                            IsActive = true,
                            ProductCategoryDescription = "Jewelries",
                            ProductCategoryName = "Jewelries"
                        },
                        new
                        {
                            ProductCategoryId = 5,
                            IsActive = true,
                            ProductCategoryDescription = "Paintings",
                            ProductCategoryName = "Paintings"
                        },
                        new
                        {
                            ProductCategoryId = 6,
                            IsActive = true,
                            ProductCategoryDescription = "Tools",
                            ProductCategoryName = "Tools"
                        },
                        new
                        {
                            ProductCategoryId = 7,
                            IsActive = true,
                            ProductCategoryDescription = "Bags",
                            ProductCategoryName = "Bags"
                        });
                });

            modelBuilder.Entity("Cobid.Api.Entities.Product.ProductCondition", b =>
                {
                    b.Property<int>("ProductConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductConditionId"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ProductConditionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductConditionId");

                    b.ToTable("ProductConditions");

                    b.HasData(
                        new
                        {
                            ProductConditionId = 1,
                            IsActive = true,
                            ProductConditionName = "New"
                        },
                        new
                        {
                            ProductConditionId = 2,
                            IsActive = true,
                            ProductConditionName = "Used - Like New"
                        },
                        new
                        {
                            ProductConditionId = 3,
                            IsActive = true,
                            ProductConditionName = "Used - Good"
                        },
                        new
                        {
                            ProductConditionId = 4,
                            IsActive = true,
                            ProductConditionName = "Used - Fair"
                        });
                });

            modelBuilder.Entity("Cobid.Api.Entities.Product.ProductImage", b =>
                {
                    b.Property<long>("ProductImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProductImageId"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ProductDataImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductImageDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductImageLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductImageTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");

                    b.HasData(
                        new
                        {
                            ProductImageId = 1L,
                            IsActive = true,
                            ProductDataImage = "",
                            ProductId = 1L,
                            ProductImageDescription = "Intel ARC a380 new GPU",
                            ProductImageLocation = "https://i2.wp.com/img.phonandroid.com/2022/07/Intro.jpg?resize=780,470",
                            ProductImageTitle = "Intel ARC a380"
                        },
                        new
                        {
                            ProductImageId = 2L,
                            IsActive = true,
                            ProductDataImage = "",
                            ProductId = 1L,
                            ProductImageDescription = "Intel ARC a380 new GPU",
                            ProductImageLocation = "https://www.digitaltrends.com/wp-content/uploads/2022/06/GUNNINR-A380-2.jpg?p=1",
                            ProductImageTitle = "Intel ARC a380"
                        },
                        new
                        {
                            ProductImageId = 3L,
                            IsActive = true,
                            ProductDataImage = "",
                            ProductId = 2L,
                            ProductImageDescription = "Assorted Clothing",
                            ProductImageLocation = "https://phshirt.com/wp-content/uploads/2021/02/T-Shirts.jpg",
                            ProductImageTitle = "Assorted Clothing"
                        },
                        new
                        {
                            ProductImageId = 4L,
                            IsActive = true,
                            ProductDataImage = "",
                            ProductId = 2L,
                            ProductImageDescription = "Assorted Clothing",
                            ProductImageLocation = "https://assets.designhill.com/resize_img.php?atyp=st_page_file&pth=ft_bt_thlcirlblirirb_org||BT23240||two_heading_left_content_image_right_link_button_left_image_right_info_right_button_left_image_img&flp=1630672410-6836666936132161a1709e3-51899622.png",
                            ProductImageTitle = "Assorted Clothing 1"
                        });
                });

            modelBuilder.Entity("Cobid.Api.Entities.Product.ProductRating", b =>
                {
                    b.Property<long>("ProductRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProductRatingId"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductRatingComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductRatingDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductRatingGrade")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("ProductRatingId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductRatings");

                    b.HasData(
                        new
                        {
                            ProductRatingId = 1L,
                            DateCreated = new DateTime(2022, 12, 6, 8, 26, 15, 514, DateTimeKind.Local).AddTicks(571),
                            ProductId = 1L,
                            ProductRatingComment = "Brand new. User is very kind and responds immediately. Thank you.",
                            ProductRatingDescription = "",
                            ProductRatingGrade = 5,
                            UserId = 1,
                            isActive = true
                        },
                        new
                        {
                            ProductRatingId = 2L,
                            DateCreated = new DateTime(2022, 12, 6, 8, 26, 15, 514, DateTimeKind.Local).AddTicks(594),
                            ProductId = 1L,
                            ProductRatingComment = "Brand new. Intel GPU.",
                            ProductRatingDescription = "",
                            ProductRatingGrade = 4,
                            UserId = 1,
                            isActive = true
                        },
                        new
                        {
                            ProductRatingId = 3L,
                            DateCreated = new DateTime(2022, 12, 6, 8, 26, 15, 514, DateTimeKind.Local).AddTicks(608),
                            ProductId = 1L,
                            ProductRatingComment = "Thank you.",
                            ProductRatingDescription = "",
                            ProductRatingGrade = 4,
                            UserId = 1,
                            isActive = true
                        },
                        new
                        {
                            ProductRatingId = 4L,
                            DateCreated = new DateTime(2022, 12, 6, 8, 26, 15, 514, DateTimeKind.Local).AddTicks(663),
                            ProductId = 2L,
                            ProductRatingComment = "Thank you. The clothes were clean and as good as new",
                            ProductRatingDescription = "",
                            ProductRatingGrade = 4,
                            UserId = 2,
                            isActive = true
                        });
                });

            modelBuilder.Entity("Cobid.Api.Entities.Product.ProductRatingImage", b =>
                {
                    b.Property<long>("ProductRatingImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProductRatingImageId"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("ProductRatingId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductRatingImageData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductRatingImageLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductRatingImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductRatingImageId");

                    b.HasIndex("ProductRatingId");

                    b.ToTable("ProductRatingImages");

                    b.HasData(
                        new
                        {
                            ProductRatingImageId = 1L,
                            IsActive = true,
                            ProductRatingId = 1L,
                            ProductRatingImageData = "",
                            ProductRatingImageLocation = "https://i.ytimg.com/vi/5AzlmyXkKh8/maxresdefault.jpg",
                            ProductRatingImageName = "rating image 1"
                        },
                        new
                        {
                            ProductRatingImageId = 2L,
                            IsActive = true,
                            ProductRatingId = 1L,
                            ProductRatingImageData = "",
                            ProductRatingImageLocation = "https://i.ytimg.com/vi/UZ0oE4AVu8w/maxresdefault.jpg",
                            ProductRatingImageName = "rating image 2"
                        },
                        new
                        {
                            ProductRatingImageId = 3L,
                            IsActive = true,
                            ProductRatingId = 1L,
                            ProductRatingImageData = "",
                            ProductRatingImageLocation = "https://i.ytimg.com/vi/G_x3b7FHGuI/maxresdefault.jpg",
                            ProductRatingImageName = "rating image 3"
                        },
                        new
                        {
                            ProductRatingImageId = 4L,
                            IsActive = true,
                            ProductRatingId = 2L,
                            ProductRatingImageData = "",
                            ProductRatingImageLocation = "https://techviral.net/wp-content/uploads/2022/06/Intel-Arc-380-Graphics-Card-Specifications.jpg",
                            ProductRatingImageName = "rating image 4"
                        },
                        new
                        {
                            ProductRatingImageId = 5L,
                            IsActive = true,
                            ProductRatingId = 2L,
                            ProductRatingImageData = "",
                            ProductRatingImageLocation = "https://pc.watch.impress.co.jp/img/pcw/docs/1430/766/a01_l.jpg",
                            ProductRatingImageName = "rating image 5"
                        },
                        new
                        {
                            ProductRatingImageId = 6L,
                            IsActive = true,
                            ProductRatingId = 3L,
                            ProductRatingImageData = "",
                            ProductRatingImageLocation = "https://static.techspot.com/articles-info/2510/images/intel-arc-4.jpg",
                            ProductRatingImageName = "rating image 6"
                        },
                        new
                        {
                            ProductRatingImageId = 7L,
                            IsActive = true,
                            ProductRatingId = 4L,
                            ProductRatingImageData = "",
                            ProductRatingImageLocation = "https://ichef.bbci.co.uk/news/640/cpsprodpb/10B12/production/_126607386_infinitedfibersclothesexamples.jpg",
                            ProductRatingImageName = "Clothes Images assorted"
                        });
                });

            modelBuilder.Entity("Cobid.Api.Entities.Product.ProductStatus", b =>
                {
                    b.Property<int>("ProductStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductStatusId"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ProductStatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductStatusId");

                    b.ToTable("ProductStatuses");

                    b.HasData(
                        new
                        {
                            ProductStatusId = 1,
                            IsActive = true,
                            ProductStatusName = "Active"
                        },
                        new
                        {
                            ProductStatusId = 2,
                            IsActive = true,
                            ProductStatusName = "Sold"
                        },
                        new
                        {
                            ProductStatusId = 3,
                            IsActive = true,
                            ProductStatusName = "Deleted"
                        });
                });

            modelBuilder.Entity("Cobid.Api.Entities.UserModel.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenderId"), 1L, 1);

                    b.Property<string>("GenderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenderId");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            GenderId = 1,
                            GenderName = "Male"
                        },
                        new
                        {
                            GenderId = 2,
                            GenderName = "Female"
                        },
                        new
                        {
                            GenderId = 3,
                            GenderName = "Other"
                        });
                });

            modelBuilder.Entity("Cobid.Api.Entities.UserModel.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CommunityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTimeSpan")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipppingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedTimeSpan")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserProfilePic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ValidationId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Cobid.Api.Entities.UserModel.UserType", b =>
                {
                    b.Property<int>("UserTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserTypeId"), 1L, 1);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserTypeId");

                    b.ToTable("UserTypes");

                    b.HasData(
                        new
                        {
                            UserTypeId = 1,
                            TypeName = "Super Admin"
                        },
                        new
                        {
                            UserTypeId = 2,
                            TypeName = "Admin"
                        },
                        new
                        {
                            UserTypeId = 3,
                            TypeName = "Seller"
                        },
                        new
                        {
                            UserTypeId = 4,
                            TypeName = "Buyer"
                        });
                });

            modelBuilder.Entity("Cobid.Api.Entities.Auction.AuctionEventParticipant", b =>
                {
                    b.HasOne("Cobid.Api.Entities.Auction.AuctionEvent", null)
                        .WithMany("AuctiontParticipants")
                        .HasForeignKey("AuctionEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cobid.Api.Entities.Auction.AuctionProductImage", b =>
                {
                    b.HasOne("Cobid.Api.Entities.Auction.AuctionEvent", null)
                        .WithMany("AuctionProductImages")
                        .HasForeignKey("AuctionEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cobid.Api.Entities.Community.CommunityFileAttachment", b =>
                {
                    b.HasOne("Cobid.Api.Entities.Community.CommunityMessage", null)
                        .WithMany("FileAttachments")
                        .HasForeignKey("CommunityMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cobid.Api.Entities.Community.CommunityImage", b =>
                {
                    b.HasOne("Cobid.Api.Entities.Community.CommunityMessage", null)
                        .WithMany("Images")
                        .HasForeignKey("CommunityMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cobid.Api.Entities.Community.CommunityMessage", b =>
                {
                    b.HasOne("Cobid.Api.Entities.Community.CommunityPost", null)
                        .WithMany("CommunityMessages")
                        .HasForeignKey("CommunityPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cobid.Api.Entities.Community.CommunityPostRating", b =>
                {
                    b.HasOne("Cobid.Api.Entities.Community.CommunityPost", null)
                        .WithMany("CommunityRatings")
                        .HasForeignKey("CommunityPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cobid.Api.Entities.Images.UserValidationImage", b =>
                {
                    b.HasOne("Cobid.Api.Entities.UserModel.User", null)
                        .WithMany("ValidationIds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cobid.Api.Entities.LiveSellingModels.LiveSellingImage", b =>
                {
                    b.HasOne("Cobid.Api.Entities.LiveSellingModels.LiveSelling", null)
                        .WithMany("LiveSellingImages")
                        .HasForeignKey("LiveSellingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cobid.Api.Entities.Messaging.AuctionMessage", b =>
                {
                    b.HasOne("Cobid.Api.Entities.Auction.AuctionEvent", null)
                        .WithMany("AuctionMessages")
                        .HasForeignKey("AuctionEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cobid.Api.Entities.Messaging.Message", b =>
                {
                    b.HasOne("Cobid.Api.Entities.Messaging.Conversation", null)
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cobid.Api.Entities.Product.ProductImage", b =>
                {
                    b.HasOne("Cobid.Api.Entities.Product.Product", null)
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cobid.Api.Entities.Product.ProductRating", b =>
                {
                    b.HasOne("Cobid.Api.Entities.Product.Product", null)
                        .WithMany("ProductRatings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cobid.Api.Entities.Product.ProductRatingImage", b =>
                {
                    b.HasOne("Cobid.Api.Entities.Product.ProductRating", null)
                        .WithMany("ProductRatingImages")
                        .HasForeignKey("ProductRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cobid.Api.Entities.Auction.AuctionEvent", b =>
                {
                    b.Navigation("AuctionMessages");

                    b.Navigation("AuctionProductImages");

                    b.Navigation("AuctiontParticipants");
                });

            modelBuilder.Entity("Cobid.Api.Entities.Community.CommunityMessage", b =>
                {
                    b.Navigation("FileAttachments");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("Cobid.Api.Entities.Community.CommunityPost", b =>
                {
                    b.Navigation("CommunityMessages");

                    b.Navigation("CommunityRatings");
                });

            modelBuilder.Entity("Cobid.Api.Entities.LiveSellingModels.LiveSelling", b =>
                {
                    b.Navigation("LiveSellingImages");
                });

            modelBuilder.Entity("Cobid.Api.Entities.Messaging.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Cobid.Api.Entities.Product.Product", b =>
                {
                    b.Navigation("ProductImages");

                    b.Navigation("ProductRatings");
                });

            modelBuilder.Entity("Cobid.Api.Entities.Product.ProductRating", b =>
                {
                    b.Navigation("ProductRatingImages");
                });

            modelBuilder.Entity("Cobid.Api.Entities.UserModel.User", b =>
                {
                    b.Navigation("ValidationIds");
                });
#pragma warning restore 612, 618
        }
    }
}
